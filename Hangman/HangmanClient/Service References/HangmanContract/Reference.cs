//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HangmanClient.HangmanContract {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="HangmanContract", ConfigurationName="HangmanContract.IPortal")]
    public interface IPortal {
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IPortal/login", ReplyAction="HangmanContract/IPortal/loginResponse")]
        bool login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IPortal/login", ReplyAction="HangmanContract/IPortal/loginResponse")]
        System.Threading.Tasks.Task<bool> loginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IPortal/register", ReplyAction="HangmanContract/IPortal/registerResponse")]
        bool register(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IPortal/register", ReplyAction="HangmanContract/IPortal/registerResponse")]
        System.Threading.Tasks.Task<bool> registerAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IPortal/invitePlayers", ReplyAction="HangmanContract/IPortal/invitePlayersResponse")]
        void invitePlayers(string[] invitedPlayerNames, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IPortal/invitePlayers", ReplyAction="HangmanContract/IPortal/invitePlayersResponse")]
        System.Threading.Tasks.Task invitePlayersAsync(string[] invitedPlayerNames, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IPortal/acceptInvitation", ReplyAction="HangmanContract/IPortal/acceptInvitationResponse")]
        void acceptInvitation(bool userAccepted);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IPortal/acceptInvitation", ReplyAction="HangmanContract/IPortal/acceptInvitationResponse")]
        System.Threading.Tasks.Task acceptInvitationAsync(bool userAccepted);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortalChannel : HangmanClient.HangmanContract.IPortal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PortalClient : System.ServiceModel.ClientBase<HangmanClient.HangmanContract.IPortal>, HangmanClient.HangmanContract.IPortal {
        
        public PortalClient() {
        }
        
        public PortalClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PortalClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortalClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortalClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool login(string username, string password) {
            return base.Channel.login(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> loginAsync(string username, string password) {
            return base.Channel.loginAsync(username, password);
        }
        
        public bool register(string username, string password) {
            return base.Channel.register(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> registerAsync(string username, string password) {
            return base.Channel.registerAsync(username, password);
        }
        
        public void invitePlayers(string[] invitedPlayerNames, string username) {
            base.Channel.invitePlayers(invitedPlayerNames, username);
        }
        
        public System.Threading.Tasks.Task invitePlayersAsync(string[] invitedPlayerNames, string username) {
            return base.Channel.invitePlayersAsync(invitedPlayerNames, username);
        }
        
        public void acceptInvitation(bool userAccepted) {
            base.Channel.acceptInvitation(userAccepted);
        }
        
        public System.Threading.Tasks.Task acceptInvitationAsync(bool userAccepted) {
            return base.Channel.acceptInvitationAsync(userAccepted);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="HangmanContract", ConfigurationName="HangmanContract.IGamePlay")]
    public interface IGamePlay {
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/chooseGameWord", ReplyAction="HangmanContract/IGamePlay/chooseGameWordResponse")]
        void chooseGameWord(string gameWord, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/chooseGameWord", ReplyAction="HangmanContract/IGamePlay/chooseGameWordResponse")]
        System.Threading.Tasks.Task chooseGameWordAsync(string gameWord, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/guessLetter", ReplyAction="HangmanContract/IGamePlay/guessLetterResponse")]
        void guessLetter(char letter, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/guessLetter", ReplyAction="HangmanContract/IGamePlay/guessLetterResponse")]
        System.Threading.Tasks.Task guessLetterAsync(char letter, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/guessWord", ReplyAction="HangmanContract/IGamePlay/guessWordResponse")]
        void guessWord(string word, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/guessWord", ReplyAction="HangmanContract/IGamePlay/guessWordResponse")]
        System.Threading.Tasks.Task guessWordAsync(string word, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/timeUp", ReplyAction="HangmanContract/IGamePlay/timeUpResponse")]
        void timeUp(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/timeUp", ReplyAction="HangmanContract/IGamePlay/timeUpResponse")]
        System.Threading.Tasks.Task timeUpAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/chat", ReplyAction="HangmanContract/IGamePlay/chatResponse")]
        void chat(string message, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/chat", ReplyAction="HangmanContract/IGamePlay/chatResponse")]
        System.Threading.Tasks.Task chatAsync(string message, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/leaveGame", ReplyAction="HangmanContract/IGamePlay/leaveGameResponse")]
        void leaveGame(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="HangmanContract/IGamePlay/leaveGame", ReplyAction="HangmanContract/IGamePlay/leaveGameResponse")]
        System.Threading.Tasks.Task leaveGameAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGamePlayChannel : HangmanClient.HangmanContract.IGamePlay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GamePlayClient : System.ServiceModel.ClientBase<HangmanClient.HangmanContract.IGamePlay>, HangmanClient.HangmanContract.IGamePlay {
        
        public GamePlayClient() {
        }
        
        public GamePlayClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GamePlayClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamePlayClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamePlayClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void chooseGameWord(string gameWord, string username) {
            base.Channel.chooseGameWord(gameWord, username);
        }
        
        public System.Threading.Tasks.Task chooseGameWordAsync(string gameWord, string username) {
            return base.Channel.chooseGameWordAsync(gameWord, username);
        }
        
        public void guessLetter(char letter, string username) {
            base.Channel.guessLetter(letter, username);
        }
        
        public System.Threading.Tasks.Task guessLetterAsync(char letter, string username) {
            return base.Channel.guessLetterAsync(letter, username);
        }
        
        public void guessWord(string word, string username) {
            base.Channel.guessWord(word, username);
        }
        
        public System.Threading.Tasks.Task guessWordAsync(string word, string username) {
            return base.Channel.guessWordAsync(word, username);
        }
        
        public void timeUp(string username) {
            base.Channel.timeUp(username);
        }
        
        public System.Threading.Tasks.Task timeUpAsync(string username) {
            return base.Channel.timeUpAsync(username);
        }
        
        public void chat(string message, string username) {
            base.Channel.chat(message, username);
        }
        
        public System.Threading.Tasks.Task chatAsync(string message, string username) {
            return base.Channel.chatAsync(message, username);
        }
        
        public void leaveGame(string username) {
            base.Channel.leaveGame(username);
        }
        
        public System.Threading.Tasks.Task leaveGameAsync(string username) {
            return base.Channel.leaveGameAsync(username);
        }
    }
}
